//UdObra.h
#ifndef UD_OBRA_H
#define UD_OBRA_H

#include "Elementos.h"
#include "ComptesBC3.h"

class UdObra: public Medible
  {
  private:
    ComptesBC3 lista;
    static ComptesBC3 ObtienePunteros(const regBC3_d &descBC3,Buscadores &bp,bool &error);
    ComptesBC3 GetSindesco(const double &rendimiento,Buscadores &bp) const;
  public:
    UdObra(const std::string &cod="",const std::string &tit="",const std::string &ud="")
      : Medible(cod,tit,ud) {}
    virtual tipo_concepto Tipo(void) const
      { return mat; } //XXX provisional.
    virtual long double Precio(void) const
      { return lista.Precio(); }
    void AsignaFactor(const float &f)
      { lista.AsignaFactor(f); }
    void Agrega(const Elemento &e,const float &f,const float &r)
      { lista.push_back(CompBC3(e,f,r)); }
    //! @brief Lee la unidad a falta de la descomposici√≥n
    void LeeBC3Fase1(const Codigos::reg_udobra &r)
      { Medible::LeeBC3(r); }
    bool LeeBC3Fase2(const Codigos::reg_udobra &r,Buscadores &bp);
    void EscribeSpre(std::ostream &os) const;
    void EscribeBC3(std::ostream &os) const;
    void ImprLtxJustPre(std::ostream &os) const;
    void ImprLtxCP1(std::ostream &os) const;
    void ImprLtxCP2(std::ostream &os) const;
    void EscribeHCalc(std::ostream &os) const;
    long double SimulaDescomp(const UdObra &otra);
  };

#endif
