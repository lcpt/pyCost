/* @(#) money.h          Copymiddle 1991 Adolfo Di Mare  */
/*                                                       */
/*            Yet Another Money C++ Class                */
/*                                                       */
/*   Use freely but acknowledge author and publication.  */
/*    DO NOT SELL IT. The author reserves all rigths!    */

/*                               BITNET: adimare@UCRVM2  */

/* Compiler:                           Borland C++ v 2.0 */
/*                          [should work with Turbo C++] */


#ifndef PROTOCURRENCY_H
#define PROTOCURRENCY_H

#include "bibXCBasica/src/util/matem.h" //floor()
#include "bibXCBasica/src/texto/en_letra.h"

//D: tipo de datos float, double, long double...
//MD: Número de decimales con el que trabajamos.
//DD: Número de dígitos significativos del tipo D
//RD: Redondeo
template <class D,short int MD,short int DD,bool RD>
class ProtoCurrency
  {
  private:
    D Floor(void) const
      {
        D retval(floor(m_Currency));
        if(RD) retval= floor(m_Currency+0.5);// 0.49 is also an option...
        return retval;
      }

    D Ceil(void) const
      {
        D retval(ceil(m_Currency));
        if(RD) retval= ceil(m_Currency-0.5);// 0.49 is also an option...
        return retval;
      }

  protected:
    typedef typeof(D) tipo;
    D m_Currency;

    static inline D SCALE()
      { return exp10(MD); }
    static inline int check(const D &d)
      { return ( fabs(d) < (exp10(DD) / SCALE()) ); }
    static int decimals() { return MD; }
    static int digits()   { return DD; }

    void FIX(void)  // get rid of unwanted decimals
      {
        // Deletes all decimals digits beyond
        // the MD decimal place.
        // - If the value is out of range, FIX
        //   won't fix it.
    m_Currency =
        (m_Currency > 0.0
            ?
              Floor()
            :
              Ceil()
        );
      }

    ProtoCurrency(void) {} // do nothing constructor
    ProtoCurrency(const D &d)
      {
        m_Currency = d*SCALE();
        FIX();
      }
    ProtoCurrency(const ProtoCurrency &m)  // copy constructor
      { m_Currency = m.m_Currency; }

    ProtoCurrency<D,MD,DD,RD> &operator= (const ProtoCurrency<D,MD,DD,RD> &m)
   // copy operator
      {
        m_Currency = m.m_Currency;
        return *this;
      }
    ProtoCurrency<D,MD,DD,RD> &operator=(const D &d) // copy from 
      {
        m_Currency = d*SCALE();
        FIX();
        return *this;
      }
  };


#endif
